1. Install Dependencies
Run the following command:

sh
Copy code
npm install pg sequelize express body-parser
2. Folder Structure
go
Copy code
notejam/
│── app.js
│── db.js
│── models.js
│── settings.js
│── routes/
│   ├── users.js
│   ├── notes.js
│── package.json
3. settings.js (Database Configuration)
Replace SQLite settings with PostgreSQL details.

js
Copy code
var settings = {
  development: {
    username: "your_db_user",
    password: "your_db_password",
    database: "notejam",
    host: "localhost",
    dialect: "postgres"
  }
};

var env = process.env.NODE_ENV || "development";
module.exports = settings[env];
Replace "your_db_user" and "your_db_password" with actual PostgreSQL credentials.

4. db.js (Database Connection)
Connect to PostgreSQL using Sequelize.

js
Copy code
const { Sequelize } = require("sequelize");
const settings = require("./settings");

const sequelize = new Sequelize(
  settings.database,
  settings.username,
  settings.password,
  {
    host: settings.host,
    dialect: settings.dialect,
    logging: false
  }
);

sequelize
  .authenticate()
  .then(() => console.log("Connected to PostgreSQL"))
  .catch((err) => console.error("Database connection error:", err));

module.exports = sequelize;
5. models.js (Database Models)
Define the User and Note models using Sequelize.

js
Copy code
const { DataTypes } = require("sequelize");
const sequelize = require("./db");

const User = sequelize.define("User", {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  email: { type: DataTypes.STRING, unique: true, allowNull: false },
  password: { type: DataTypes.STRING, allowNull: false }
});

const Note = sequelize.define("Note", {
  id: { type: DataTypes.INTEGER, primaryKey: true, autoIncrement: true },
  title: { type: DataTypes.STRING, allowNull: false },
  content: { type: DataTypes.TEXT, allowNull: false },
  userId: { 
    type: DataTypes.INTEGER, 
    references: { model: "Users", key: "id" }
  }
});

// Define relationships
User.hasMany(Note, { foreignKey: "userId" });
Note.belongsTo(User, { foreignKey: "userId" });

// Sync database
sequelize.sync()
  .then(() => console.log("Database & tables created"))
  .catch(err => console.error("Database sync error:", err));

module.exports = { User, Note };
6. routes/users.js (User Routes)
Handles user registration.

js
Copy code
const express = require("express");
const { User } = require("../models");
const router = express.Router();

// User Registration
router.post("/register", async (req, res) => {
  try {
    const user = await User.create({
      email: req.body.email,
      password: req.body.password
    });
    res.send("User registered!");
  } catch (err) {
    res.status(500).send(err);
  }
});

// Get all users
router.get("/", async (req, res) => {
  try {
    const users = await User.findAll();
    res.json(users);
  } catch (err) {
    res.status(500).send(err);
  }
});

module.exports = router;
7. routes/notes.js (Note Routes)
Handles note creation and retrieval.

js
Copy code
const express = require("express");
const { Note } = require("../models");
const router = express.Router();

// Create a note
router.post("/create", async (req, res) => {
  try {
    const note = await Note.create({
      title: req.body.title,
      content: req.body.content,
      userId: req.body.userId
    });
    res.send("Note created!");
  } catch (err) {
    res.status(500).send(err);
  }
});

// Get all notes
router.get("/", async (req, res) => {
  try {
    const notes = await Note.findAll();
    res.json(notes);
  } catch (err) {
    res.status(500).send(err);
  }
});

module.exports = router;
8. app.js (Main App File)
Sets up Express and routes.

js
Copy code
const express = require("express");
const bodyParser = require("body-parser");

const userRoutes = require("./routes/users");
const noteRoutes = require("./routes/notes");

const app = express();
app.use(bodyParser.json());

// Routes
app.use("/users", userRoutes);
app.use("/notes", noteRoutes);

// Start server
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
9. package.json (Dependencies)
If you don’t have a package.json, create one.

json
Copy code
{
  "name": "notejam",
  "version": "1.0.0",
  "description": "Note-taking app using PostgreSQL",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "pg": "^8.10.0",
    "sequelize": "^6.29.0",
    "body-parser": "^1.20.2"
  }
}
10. Run the Application
Step 1: Install Dependencies
Run:

sh
Copy code
npm install
Step 2: Run Database Migration
sh
Copy code
node db.js
Step 3: Start the Server
sh
Copy code
npm start
11. Test the API
1. Register a User
sh
Copy code
curl -X POST http://localhost:3000/users/register \
     -H "Content-Type: application/json" \
     -d '{"email": "user@example.com", "password": "12345"}'
2. Get All Users
sh
Copy code
curl -X GET http://localhost:3000/users
3. Create a Note
sh
Copy code
curl -X POST http://localhost:3000/notes/create \
     -H "Content-Type: application/json" \
     -d '{"title": "First Note", "content": "This is a note", "userId": 1}'
4. Get All Notes
sh
Copy code
curl -X GET http://localhost:3000/notes
Summary of Changes
✅ Replaced SQLite with PostgreSQL.
✅ Used Sequelize ORM for database operations.
✅ Updated all queries to work with PostgreSQL.
✅ Created routes for users and notes.
✅ Provided complete file-wise code for easy integration.

Let me know if you need further modifications!
